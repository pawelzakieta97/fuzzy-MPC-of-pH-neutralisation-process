function [fc, fm] = get_fuzzy_slin_controller(op_points, lambdas, membership_fun)
clear controllers;
clear diffeq_models;

D = 80;
N = D;
Nu = 2;
for params_idx=1:len(op_points)
        % wyznaczenie wartoœci sygna³ów steruj¹cych, dla których uzyskane jest
        % zadane wzmocnienie op_points(i)
        u0 = static_inv(op_points(op_point_idx),1);

        % wyznaczenie odpowiedzi skokowych z danego punktu pracy dla sygna³u
        % steruj¹cego u1 i zak³ócenia u2
        [~, step1] = step(u0, [step_size,0,0], D+1);
        step1 = (step1(2:D+1)-step1(1))/step_size;
        [~, step2] = step(u0, [0,0.1,0], D+1);
        step2 = (step2(2:D+1)-step2(1))/step_size;
        s = zeros(D, 2);
        s(:,1)=step1;
        s(:,2)=step2;
        step_model = StepRespModel(s, step_size, ModelParams());
        % utworzenie listy regulatorów dmc na podstawie wygenerowanych
        % odpowiedzi skokowych
        controllers(op_point_idx)=DMC(step_model,N,Nu,D,lambdas(op_point_idx));
    fc = FuzzyController(controllers, membership_fun, @output_and_step_size);
end
if length(lambdas)==1
    fc = controllers(1);
end